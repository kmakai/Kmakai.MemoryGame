@page "/"
@rendermode InteractiveWebAssembly
@inject HttpClient ApiClient



<div class="w-100 h-100 d-flex flex-column position-relative">
    <div class="w-100 bg-white position-fixed top-0 mt-0 pt-2 pb-0 ps-4">

        <div class="@(!playing ? "hidden" : "") ps-2 d-flex w-100">
            @if (mode != GameMode.Moves)
            {
                <p class="mb-0 fs-5">
                    Time: @elapsedTime.ToString(@"hh\:mm\:ss") @(mode == GameMode.RaceTime ? $" / 00:0{TimeLimit}:00" : "")
                </p>
            }
            else
            {
                <p class="mb-0 fs-5">
                    Moves: @moves
                </p>
            }
            <p class="text-center mx-auto fs-6">Score: @Score / 100</p>

        </div>
    </div>
    @if (!playing || (cardDisplayList != null && IsGameOver()))
    {
        <div class="Menu " style="">
            @if (mode == null)
            {
                <div class="gamemode mt-5">
                    <h1 class="text-center">Choose game mode</h1>
                    <div class="d-flex gap-2 w-100 justify-content-center">
                        <button class="btn btn-success d-flex flex-column justify-content-center align-items-center" style="width: 200px;height: 200px;" @onclick="() => mode = GameMode.Normal">
                            <h3>
                                Normal
                            </h3>
                            <p>
                                <small>See how long it takes to finish the game</small>
                            </p>
                        </button>
                        <button class="btn btn-success d-flex flex-column justify-content-center align-items-center" style="width: 200px;height: 200px;" @onclick="() => mode = GameMode.RaceTime">
                            <h3>
                                Race Time
                            </h3>
                            <p>
                                <small>Get the highest score in the given time</small>
                            </p>
                        </button>
                        <button class="btn btn-success d-flex flex-column justify-content-center align-items-center" style="width: 200px;height: 200px;" @onclick="() => mode = GameMode.Moves">
                            <h3>
                                Moves
                            </h3>
                            <p>
                                <small>Get as many matches in the amount of moves given</small>
                            </p>
                        </button>
                    </div>
                </div>
            }

            @if (mode != null && difficulty != null && !playing)
            {
                <button class="btn btn-success fs-3 d-flex justify-content-center align-items-center mx-auto mt-5" style="width: 200px;height: 200px;" @onclick="() => StartGame()">Start game</button>
            }

            @if (mode != null && difficulty == null)
            {
                <div class="gamedifficulty mt-5">
                    <h1 class="text-center">Choose game difficulty</h1>
                    <div class="d-flex gap-2 w-100 justify-content-center">
                        <button class="btn btn-success d-flex flex-column justify-content-center align-items-center" style="width: 200px;height: 200px;" @onclick="() => difficulty = GameDifficulty.Easy">
                            <h3>
                                Easy
                            </h3>
                            <p>
                                match 8 pairs of cards
                            </p>
                            @if (mode == GameMode.RaceTime)
                            {
                                <p>
                                    <small>Time limit: 1 minutes</small>
                                </p>
                            }
                            @if (mode == GameMode.Moves)
                            {
                                <p>
                                    <small>Moves limit: 16</small>
                                </p>
                            }
                        </button>
                        <button class="btn btn-success d-flex flex-column justify-content-center align-items-center" style="width: 200px;height: 200px;" @onclick="() => difficulty = GameDifficulty.Normal">
                            <h3>
                                Normal
                            </h3>
                            <p>
                                Match 12 pairs of cards
                            </p>
                            @if (mode == GameMode.RaceTime)
                            {
                                <p>
                                    <small>Time limit: 2 minute</small>
                                </p>
                            }
                            @if (mode == GameMode.Moves)
                            {
                                <p>
                                    <small>Moves limit: 24</small>
                                </p>
                            }
                        </button>
                        <button class="btn btn-success d-flex flex-column justify-content-center align-items-center" style="width: 200px;height: 200px;" @onclick="() => difficulty = GameDifficulty.Hard">
                            <h3>
                                Hard
                            </h3>
                            <p>
                                Match 16 pairs of cards
                            </p>
                            @if (mode == GameMode.RaceTime)
                            {
                                <p>
                                    <small>Time limit: 3 minutes</small>
                                </p>
                            }
                            @if (mode == GameMode.Moves)
                            {
                                <p>
                                    <small>Moves limit: 32</small>
                                </p>
                            }
                        </button>
                    </div>
                </div>
            }
        </div>
    }

    @if (cardDisplayList != null && IsGameOver())
    {
        <div class="bg-primary position-absolute top-0 w-100 h-100 d-flex flex-column justify-content-center align-items-center" style="--bs-bg-opacity: .05;">
            <div class=" bg-white bg-opacity-50 p-4 w-50">
                <h3 class="text-center">Game Over</h3>
                @if (mode != GameMode.Moves)
                {
                    <h3 class="text-center">Your time is: @elapsedTime.ToString(@"hh\:mm\:ss")</h3>
                }

                @if (mode == GameMode.Moves)
                {
                    <h2 class="text-center">Your moves left: @moves</h2>
                }
                @if (mode != GameMode.Normal)
                {
                    <div>
                        <h3 class="text-center">Your score is: @Score / 100%</h3>
                    </div>
                }
                <div class="buttons d-flex mb-4 gap-2 justify-content-center">
                    <button class="btn btn-primary d-flex justify-content-center align-items-center py-3"
                            @onclick="() => { playing = false; mode = null; difficulty = null; cardDisplayList = null; Score = 0; elapsedTime = TimeSpan.Zero;}"
                            style="">
                        New Game
                    </button>

                    <button class="btn btn-primary d-flex justify-content-center align-items-center"
                            @onclick="() => { playing = false; difficulty = null; cardDisplayList = null; Score = 0; elapsedTime = TimeSpan.Zero;}">
                        Change Difficulty
                    </button>
                    <button class="btn btn-success" @onclick="SaveGame">Save Game</button>
                </div>

            </div>
        </div>
    }

    @if (cardDisplayList != null && playing)
    {
        <div class="d-flex flex-wrap gap-2 w-100 justify-content-center mt-5">
            @foreach (var card in cardDisplayList)
            {
                <button class="p-0 rounded-3 border border-0" style="width:125px;height:175px;" @onclick="() =>{ if(firstCard == null || secondCard == null ) FlipCard(card);}">
                    <img src="@(card.IsFlipped || card.IsMatched?@card.Image : "images/seal.png")" alt="@card.Name" class="w-100 h-100 m-0 rounded-2" />
                </button>

            }
        </div>
    }
</div>


@code {


    private int Score = 0;
    private bool playing = false;
    private Card[]? cardDisplayList;

    // testing
    private GameMode? mode;
    private GameDifficulty? difficulty;
    private Timer? timer;

    private async Task SaveGame()
    {
        if (mode == GameMode.Normal)
        {
            Console.WriteLine("Normal Mode: Save");

            var game = new NormalGame()
                {
                    Duration = elapsedTime,
                    GameDifficulty = difficulty ?? GameDifficulty.Normal,
                    Date = DateTime.Now,

                };

            Console.WriteLine(game.ToString());

            try
            {
                var response = await ApiClient.PostAsJsonAsync("api/NormalGame", game);
                if (response.IsSuccessStatusCode)
                {
                    Console.WriteLine("Game saved");
                }
                else
                {
                    Console.WriteLine("Game not saved");
                }
            }
            catch (Exception e)
            {
                Console.WriteLine(e.Message);
            }

        }

        if(mode == GameMode.RaceTime)
        {
            Console.WriteLine("Race Game Save");

            var game = new RaceGame()
            {
                Duration = elapsedTime,
                GameDifficulty = difficulty ?? GameDifficulty.Normal,
                Date = DateTime.Now,
                Score = Score
            };
        }
    }


    private void StartGame()
    {
        if (mode == GameMode.RaceTime) SetTimeLimit();
        timer = new Timer(NormalModeCallback!);
        if (mode == GameMode.Normal || mode == GameMode.RaceTime) timer.start();
        if (mode == GameMode.Moves) SetMoves();
        var cardsList = CardList.GetRandomCards(GameDifficultyExtensions.GetCardsNumber(difficulty ?? GameDifficulty.Normal));
        cardDisplayList = new Card[cardsList.Count * 2];
        int i = 0;
        foreach (var card in cardsList)
        {
            cardDisplayList[i] = new Card()
                {
                    Image = card.Image,
                    Name = card.Name,
                    IsFlipped = card.IsFlipped,
                    IsMatched = card.IsMatched
                };
            cardDisplayList[i + 1] = new Card()
                {
                    Image = card.Image,
                    Name = card.Name,
                    IsFlipped = card.IsFlipped,
                    IsMatched = card.IsMatched
                };

            i += 2;
        }

        ShuffleCards();

        playing = true;


    }

    private TimeSpan elapsedTime;
    public void NormalModeCallback(object state)
    {
        elapsedTime = DateTime.Now - timer!.StartTime;
        if (mode != GameMode.Moves && IsGameOver())
        {
            timer!.stop();
        }
        StateHasChanged();
    }

    private int TimeLimit = 0;
    private void SetTimeLimit()
    {
        switch (difficulty)
        {
            case GameDifficulty.Easy:
                TimeLimit = 1;
                break;
            case GameDifficulty.Normal:
                TimeLimit = 2;
                break;
            case GameDifficulty.Hard:
                TimeLimit = 3;
                break;
            default:
                TimeLimit = 0;
                break;
        }
    }

    private int moves = 0;
    private void SetMoves()
    {
        switch (difficulty)
        {
            case GameDifficulty.Easy:
                moves = 16;
                break;
            case GameDifficulty.Normal:
                moves = 24;
                break;
            case GameDifficulty.Hard:
                moves = 32;
                break;
            default:
                moves = 0;
                break;
        }
    }



    private void ShuffleCards()
    {
        Random rng = new Random();
        int n = cardDisplayList!.Length;
        while (n > 1)
        {
            n--;
            int k = rng.Next(n + 1);
            var value = cardDisplayList[k];
            cardDisplayList[k] = cardDisplayList[n];
            cardDisplayList[n] = value;
        }
    }

    private Card? firstCard = null;
    private Card? secondCard = null;
    private void FlipCard(Card card)
    {
        if (card.IsMatched || IsGameOver()) return;


        card.IsFlipped = true;

        if (firstCard == null) firstCard = card;
        else if (secondCard == null) secondCard = card;

        if (firstCard != null && secondCard != null) CheckMatch();

        if (IsGameOver() && mode != GameMode.Moves)
        {
            timer!.stop();
            Console.WriteLine($"Game Over - Your time is: {elapsedTime}");
        }




    }

    private async void CheckMatch()
    {
        Console.WriteLine("Checking Match");
        if (firstCard!.Name == secondCard!.Name)
        {
            firstCard.IsMatched = true;
            secondCard.IsMatched = true;
            SetScore();
        }
        else
        {
            await Task.Delay(700);
            firstCard.IsFlipped = false;
            secondCard.IsFlipped = false;
        }

        if (mode == GameMode.Moves) moves--;

        firstCard = null;
        secondCard = null;
        StateHasChanged();


    }

    private void SetScore()
    {
        var cardCount = cardDisplayList!.Count(x => x.IsMatched) / 2;
        var totalCardCount = cardDisplayList!.Length / 2;
        Score = (int)Math.Round((double)cardCount / totalCardCount * 100);

    }



    private bool IsGameOver()
    {
        switch (mode)
        {
            case GameMode.Normal:
                return cardDisplayList!.All(x => x.IsMatched);
            case GameMode.RaceTime:
                return elapsedTime.TotalMinutes >= TimeLimit || cardDisplayList!.All(x => x.IsMatched);

            case GameMode.Moves:
                return moves <= 0 || cardDisplayList!.All(x => x.IsMatched);
            default:
                return false;
        };
    }

}
